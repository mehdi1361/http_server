# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-01-16 10:54
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('objects', '0063_auto_20180116_0928'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalUserItem',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='quantity card')),
                ('next_upgrade_coin_cost', models.PositiveIntegerField(default=0, verbose_name='next Upgrade Coin Cost')),
                ('next_upgrade_card_count', models.PositiveIntegerField(default=0, verbose_name='next upgrade card count')),
                ('level', models.PositiveIntegerField(default=0, verbose_name='level')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.Item')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user_item',
            },
        ),
        migrations.CreateModel(
            name='UserItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='quantity card')),
                ('next_upgrade_coin_cost', models.PositiveIntegerField(default=0, verbose_name='next Upgrade Coin Cost')),
                ('next_upgrade_card_count', models.PositiveIntegerField(default=0, verbose_name='next upgrade card count')),
                ('level', models.PositiveIntegerField(default=0, verbose_name='level')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='objects.Item', verbose_name='item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.AUTH_USER_MODEL, verbose_name='username')),
            ],
            options={
                'db_table': 'user_item',
                'verbose_name': 'user_item',
                'verbose_name_plural': 'user_item',
            },
        ),
        migrations.AlterUniqueTogether(
            name='useritem',
            unique_together=set([('user', 'item')]),
        ),
    ]
