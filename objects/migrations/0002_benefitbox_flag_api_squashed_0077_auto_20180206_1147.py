# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-02-10 10:21
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import objects.validators
import uuid


class Migration(migrations.Migration):

    replaces = [('objects', '0002_benefitbox_flag_api'), ('objects', '0003_auto_20171216_1600'), ('objects', '0004_auto_20171216_1606'), ('objects', '0005_auto_20171218_1351'), ('objects', '0006_auto_20171218_1423'), ('objects', '0007_auto_20171218_1435'), ('objects', '0008_auto_20171218_1453'), ('objects', '0009_auto_20171218_1523'), ('objects', '0010_auto_20171230_0634'), ('objects', '0011_auto_20171230_0636'), ('objects', '0012_auto_20171230_0804'), ('objects', '0013_auto_20171230_0922'), ('objects', '0014_auto_20171230_1049'), ('objects', '0015_auto_20171230_1202'), ('objects', '0016_auto_20171230_1222'), ('objects', '0017_auto_20171230_1224'), ('objects', '0018_auto_20171230_1405'), ('objects', '0019_auto_20171230_1410'), ('objects', '0020_auto_20171231_0611'), ('objects', '0021_auto_20171231_0636'), ('objects', '0022_auto_20171231_0713'), ('objects', '0023_auto_20171231_1047'), ('objects', '0024_auto_20171231_1211'), ('objects', '0025_auto_20171231_1237'), ('objects', '0026_auto_20171231_1406'), ('objects', '0027_auto_20180101_0711'), ('objects', '0028_auto_20180102_1106'), ('objects', '0029_chest_chest_type'), ('objects', '0030_auto_20180102_1353'), ('objects', '0031_auto_20180102_1356'), ('objects', '0032_auto_20180102_1502'), ('objects', '0033_auto_20180103_0847'), ('objects', '0034_userchest'), ('objects', '0035_auto_20180103_1132'), ('objects', '0036_auto_20180103_1339'), ('objects', '0037_auto_20180103_1339'), ('objects', '0038_auto_20180103_1418'), ('objects', '0039_auto_20180103_1418'), ('objects', '0040_auto_20180103_1433'), ('objects', '0041_historicalbenefitbox_historicalchest_historicalhero_historicalherounits_historicalleague_historicalu'), ('objects', '0042_auto_20180106_0750'), ('objects', '0043_auto_20180107_1058'), ('objects', '0044_auto_20180107_1101'), ('objects', '0045_auto_20180110_0741'), ('objects', '0046_auto_20180110_0824'), ('objects', '0047_auto_20180110_1224'), ('objects', '0048_auto_20180110_1225'), ('objects', '0049_auto_20180110_1419'), ('objects', '0050_auto_20180113_1051'), ('objects', '0051_auto_20180113_1249'), ('objects', '0052_auto_20180113_1413'), ('objects', '0053_item'), ('objects', '0054_auto_20180115_1135'), ('objects', '0055_auto_20180115_1145'), ('objects', '0056_auto_20180115_1147'), ('objects', '0057_auto_20180115_1216'), ('objects', '0058_auto_20180115_1218'), ('objects', '0059_item_item_type'), ('objects', '0060_auto_20180115_1223'), ('objects', '0061_auto_20180115_1504'), ('objects', '0062_auto_20180116_0826'), ('objects', '0063_auto_20180116_0928'), ('objects', '0064_auto_20180116_1054'), ('objects', '0065_auto_20180116_1158'), ('objects', '0066_auto_20180116_1237'), ('objects', '0067_auto_20180116_1249'), ('objects', '0068_auto_20180117_0757'), ('objects', '0069_auto_20180117_0801'), ('objects', '0070_auto_20180117_0811'), ('objects', '0071_auto_20180117_0835'), ('objects', '0072_auto_20180117_1218'), ('objects', '0073_auto_20180117_1309'), ('objects', '0074_auto_20180117_1309'), ('objects', '0075_spell'), ('objects', '0076_spelleffect'), ('objects', '0077_auto_20180206_1147')]

    dependencies = [
        ('objects', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='benefitbox',
            name='flag_api',
            field=models.BooleanField(default=False, verbose_name='show box for user'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='name',
            field=models.CharField(max_length=50, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='benefitbox',
            name='name',
            field=models.CharField(max_length=40, verbose_name='name'),
        ),
        migrations.CreateModel(
            name='UserBuy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('benefit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_buy', to='objects.BenefitBox')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_buy', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user_buy',
                'verbose_name_plural': 'user_buy',
            },
        ),
        migrations.AddField(
            model_name='benefitbox',
            name='user',
            field=models.ManyToManyField(related_name='benefits', through='objects.UserBuy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('gem', models.PositiveIntegerField(default=0, verbose_name='gem quantity')),
                ('coin', models.PositiveIntegerField(default=0, verbose_name='coin quantity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_currency', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_chest',
                'verbose_name': 'profile',
                'verbose_name_plural': 'profile',
            },
        ),
        migrations.AlterModelTable(
            name='userbuy',
            table='user_buy',
        ),
        migrations.CreateModel(
            name='UserUnits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_units', to='objects.Unit')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_units', to=settings.AUTH_USER_MODEL)),
                ('cur_card_count', models.PositiveIntegerField(default=1, verbose_name='cur card count')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='level')),
                ('next_upgrade_card_count', models.PositiveIntegerField(default=0, verbose_name='next upgrade card count')),
                ('next_upgrade_coin_cost', models.PositiveIntegerField(default=0, verbose_name='next Upgrade Coin Cost')),
            ],
            options={
                'db_table': 'user_unit',
                'verbose_name': 'user_unit',
                'verbose_name_plural': 'user_unit',
            },
        ),
        migrations.AddField(
            model_name='unit',
            name='user',
            field=models.ManyToManyField(related_name='units', through='objects.UserCard', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='userunits',
            unique_together=set([]),
        ),
        migrations.RemoveField(
            model_name='unit',
            name='name',
        ),
        migrations.AddField(
            model_name='hero',
            name='enable_in_start',
            field=models.BooleanField(default=False, verbose_name='enable in start'),
        ),
        migrations.AddField(
            model_name='hero',
            name='moniker',
            field=models.CharField(max_length=50, unique=True, verbose_name='moniker'),
        ),
        migrations.AddField(
            model_name='hero',
            name='unique_id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='unique id'),
        ),
        migrations.AddField(
            model_name='unit',
            name='enable_in_start',
            field=models.BooleanField(default=False, verbose_name='enable in start'),
        ),
        migrations.AddField(
            model_name='unit',
            name='moniker',
            field=models.CharField(max_length=50, unique=True, verbose_name='moniker'),
        ),
        migrations.AddField(
            model_name='unit',
            name='unique_id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='unique id'),
        ),
        migrations.RemoveField(
            model_name='hero',
            name='name',
        ),
        migrations.AddField(
            model_name='hero',
            name='attack_type',
            field=models.CharField(choices=[('NORMAL', 'normal'), ('SKILLSHOT', 'skillshot'), ('AUTOMATIC', 'automatic')], default='normal', max_length=50, verbose_name='attack type'),
        ),
        migrations.AddField(
            model_name='unit',
            name='attack_type',
            field=models.CharField(choices=[('NORMAL', 'normal'), ('SKILLSHOT', 'skillshot'), ('AUTOMATIC', 'automatic')], default='normal', max_length=50, verbose_name='attack type'),
        ),
        migrations.RemoveField(
            model_name='hero',
            name='image',
        ),
        migrations.RemoveField(
            model_name='hero',
            name='image_logo',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='image',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='image_logo',
        ),
        migrations.AddField(
            model_name='hero',
            name='chakra_attack',
            field=models.IntegerField(default=10, verbose_name='chakra attack'),
        ),
        migrations.AddField(
            model_name='hero',
            name='chakra_critical_chance',
            field=models.FloatField(default=0.01, verbose_name='chakra critical chance'),
        ),
        migrations.AddField(
            model_name='hero',
            name='chakra_critical_ratio',
            field=models.FloatField(default=0.01, verbose_name='chakra critical ratio'),
        ),
        migrations.AddField(
            model_name='hero',
            name='chakra_dodge_chance',
            field=models.FloatField(default=0.0, verbose_name='chakra dodge chance'),
        ),
        migrations.AddField(
            model_name='hero',
            name='chakra_health',
            field=models.IntegerField(default=100, verbose_name='chakra health'),
        ),
        migrations.AddField(
            model_name='hero',
            name='chakra_miss_chance',
            field=models.FloatField(default=0.0, verbose_name='chakra miss chance'),
        ),
        migrations.AddField(
            model_name='hero',
            name='chakra_shield',
            field=models.IntegerField(default=0, verbose_name='chakra shield'),
        ),
        migrations.CreateModel(
            name='HeroUnits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='objects.Hero', verbose_name='Hero')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heroes', to='objects.Unit', verbose_name='Units')),
                ('enable_hero', models.BooleanField(default=False, verbose_name='enable hero')),
            ],
            options={
                'db_table': 'hero_units',
                'verbose_name': 'hero_unit',
                'verbose_name_plural': 'hero_units',
            },
        ),
        migrations.AlterUniqueTogether(
            name='herounits',
            unique_together=set([('hero', 'unit')]),
        ),
        migrations.AlterField(
            model_name='herounits',
            name='hero',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units_hero', to='objects.Hero'),
        ),
        migrations.AlterField(
            model_name='herounits',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_heroes', to='objects.Unit'),
        ),
        migrations.AddField(
            model_name='hero',
            name='units',
            field=models.ManyToManyField(related_name='hero', through='objects.HeroUnits', to='objects.Unit'),
        ),
        migrations.AddField(
            model_name='unit',
            name='heroes',
            field=models.ManyToManyField(related_name='hero', through='objects.HeroUnits', to='objects.Hero'),
        ),
        migrations.CreateModel(
            name='UserHero',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('enable_hero', models.BooleanField(default=False, verbose_name='enable hero')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_hero', to='objects.Hero')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_hero', to=settings.AUTH_USER_MODEL)),
                ('level', models.PositiveIntegerField(default=0, verbose_name='level')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='quantity card')),
                ('selected_item', django.contrib.postgres.fields.jsonb.JSONField(default=None, null=True, verbose_name='selected item')),
            ],
            options={
                'db_table': 'user_hero',
                'verbose_name': 'user_hero',
                'verbose_name_plural': 'user_hero',
            },
        ),
        migrations.RemoveField(
            model_name='herounits',
            name='enable_hero',
        ),
        migrations.AddField(
            model_name='hero',
            name='user',
            field=models.ManyToManyField(related_name='hero', through='objects.UserHero', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='userhero',
            unique_together=set([('user', 'hero')]),
        ),
        migrations.CreateModel(
            name='UserCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='quantity card')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='objects.Unit', verbose_name='character')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to=settings.AUTH_USER_MODEL, verbose_name='username')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='level')),
                ('cool_down', models.DateTimeField(null=True, verbose_name='cooldown')),
            ],
            options={
                'db_table': 'user_card',
                'verbose_name': 'user_card',
                'verbose_name_plural': 'user_cards',
            },
        ),
        migrations.AlterUniqueTogether(
            name='usercard',
            unique_together=set([('user', 'character')]),
        ),
        migrations.AddField(
            model_name='hero',
            name='level',
            field=models.PositiveIntegerField(default=0, verbose_name='level'),
        ),
        migrations.AddField(
            model_name='unit',
            name='level',
            field=models.PositiveIntegerField(default=0, verbose_name='level'),
        ),
        migrations.RemoveField(
            model_name='userunits',
            name='unit',
        ),
        migrations.RemoveField(
            model_name='userunits',
            name='user',
        ),
        migrations.DeleteModel(
            name='UserUnits',
        ),
        migrations.CreateModel(
            name='Chest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('min_coin', models.PositiveIntegerField(default=0, verbose_name='min coin')),
                ('max_coin', models.PositiveIntegerField(default=0, verbose_name='max coin')),
                ('min_gem', models.PositiveIntegerField(default=0, verbose_name='min gem')),
                ('max_gem', models.PositiveIntegerField(default=0, verbose_name='max gem')),
                ('new_card_chance', models.PositiveIntegerField(default=1, validators=[objects.validators.validate_percent], verbose_name='new card chance percentage')),
                ('hero_card', models.PositiveIntegerField(default=0, verbose_name='hero card count')),
                ('unit_card', models.PositiveIntegerField(default=3, verbose_name='unit card count')),
            ],
            options={
                'db_table': 'chest',
                'verbose_name': 'chest',
                'verbose_name_plural': 'chest',
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('min_score', models.PositiveIntegerField(default=0, verbose_name='score for enter the league')),
                ('description', models.TextField(default='', null=True, verbose_name='description')),
            ],
            options={
                'db_table': 'leagues',
                'verbose_name': 'league',
                'verbose_name_plural': 'leagues',
            },
        ),
        migrations.AddField(
            model_name='chest',
            name='league',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='objects.League', verbose_name='chest'),
        ),
        migrations.AddField(
            model_name='chest',
            name='chest_type',
            field=models.CharField(choices=[('w', 'wooden'), ('s', 'silver'), ('g', 'gold'), ('c', 'crystal')], default='w', max_length=50, verbose_name='chest type'),
        ),
        migrations.AlterUniqueTogether(
            name='chest',
            unique_together=set([('league', 'chest_type')]),
        ),
        migrations.AlterField(
            model_name='chest',
            name='league',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chests', to='objects.League', verbose_name='chest'),
        ),
        migrations.CreateModel(
            name='UserChest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('chest_type', models.CharField(choices=[('free', 'FREE'), ('non_free', 'NON_FREE')], default='non_free', max_length=50, verbose_name='chest type')),
                ('chest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='objects.Chest', verbose_name='chest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chests', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('status', models.CharField(choices=[('close', 'close'), ('opening', 'opening'), ('ready', 'ready'), ('used', 'used')], default='close', max_length=50, verbose_name='status')),
                ('cards', django.contrib.postgres.fields.jsonb.JSONField(default=None, null=True, verbose_name='cards')),
                ('sequence_number', models.PositiveIntegerField(default=0, validators=[objects.validators.validate_sequence], verbose_name='sequence number')),
                ('chest_opening_date', models.DateTimeField(default=None, null=True, verbose_name='chest opening time')),
            ],
            options={
                'db_table': 'user_chests',
                'verbose_name': 'user_chest',
                'verbose_name_plural': 'user_chest',
            },
        ),
        migrations.AlterField(
            model_name='chest',
            name='chest_type',
            field=models.CharField(choices=[('W', 'wooden'), ('S', 'silver'), ('G', 'gold'), ('C', 'crystal')], default='w', max_length=50, verbose_name='chest type'),
        ),
        migrations.CreateModel(
            name='HistoricalBenefitBox',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('name', models.CharField(max_length=40, verbose_name='name')),
                ('box', models.CharField(choices=[('GEM', 'gem'), ('COIN', 'coin')], max_length=4, verbose_name='box')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='quantity')),
                ('flag_api', models.BooleanField(default=False, verbose_name='show box for user')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical benefit_box',
            },
        ),
        migrations.CreateModel(
            name='HistoricalChest',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('chest_type', models.CharField(choices=[('W', 'wooden'), ('S', 'silver'), ('G', 'gold'), ('C', 'crystal')], default='W', max_length=50, verbose_name='chest type')),
                ('min_coin', models.PositiveIntegerField(default=0, verbose_name='min coin')),
                ('max_coin', models.PositiveIntegerField(default=0, verbose_name='max coin')),
                ('min_gem', models.PositiveIntegerField(default=0, verbose_name='min gem')),
                ('max_gem', models.PositiveIntegerField(default=0, verbose_name='max gem')),
                ('new_card_chance', models.PositiveIntegerField(default=1, validators=[objects.validators.validate_percent], verbose_name='new card chance percentage')),
                ('hero_card', models.PositiveIntegerField(default=0, verbose_name='hero card count')),
                ('unit_card', models.PositiveIntegerField(default=3, verbose_name='unit card count')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('info', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.League')),
                ('opening_time', models.PositiveIntegerField(default=5, verbose_name='opening time')),
                ('time_to_open', models.PositiveIntegerField(default=2, verbose_name='time to open')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical chest',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHero',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('enable_in_start', models.BooleanField(default=False, verbose_name='enable in start')),
                ('unique_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='unique id')),
                ('moniker', models.CharField(db_index=True, max_length=50, verbose_name='moniker')),
                ('dexterity', models.CharField(choices=[('MIDDLE', 'middle'), ('LATE', 'late'), ('EARLY', 'early')], default='MIDDLE', max_length=50, verbose_name='dexterity')),
                ('attack_type', models.CharField(choices=[('NORMAL', 'normal'), ('SKILLSHOT', 'skillshot'), ('AUTOMATIC', 'automatic')], default='normal', max_length=50, verbose_name='attack type')),
                ('health', models.IntegerField(default=100, verbose_name='health')),
                ('shield', models.IntegerField(default=0, verbose_name='shield')),
                ('attack', models.IntegerField(default=10, verbose_name='attack')),
                ('critical_chance', models.FloatField(default=0.01, verbose_name='critical chance')),
                ('critical_ratio', models.FloatField(default=0.01, verbose_name='critical ratio')),
                ('miss_chance', models.FloatField(default=0.0, verbose_name='miss chance')),
                ('dodge_chance', models.FloatField(default=0.0, verbose_name='dodge chance')),
                ('chakra_health', models.IntegerField(default=100, verbose_name='chakra health')),
                ('chakra_shield', models.IntegerField(default=0, verbose_name='chakra shield')),
                ('chakra_attack', models.IntegerField(default=10, verbose_name='chakra attack')),
                ('chakra_critical_chance', models.FloatField(default=0.01, verbose_name='chakra critical chance')),
                ('chakra_critical_ratio', models.FloatField(default=0.01, verbose_name='chakra critical ratio')),
                ('chakra_miss_chance', models.FloatField(default=0.0, verbose_name='chakra miss chance')),
                ('chakra_dodge_chance', models.FloatField(default=0.0, verbose_name='chakra dodge chance')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical hero',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHeroUnits',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('hero', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.Hero')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('unit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.Unit')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical hero_unit',
            },
        ),
        migrations.CreateModel(
            name='HistoricalLeagueInfo',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('min_score', models.PositiveIntegerField(default=0, verbose_name='score for enter the league')),
                ('description', models.TextField(default='', null=True, verbose_name='description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical league_info',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUnit',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('enable_in_start', models.BooleanField(default=False, verbose_name='enable in start')),
                ('unique_id', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='unique id')),
                ('moniker', models.CharField(db_index=True, max_length=50, verbose_name='moniker')),
                ('dexterity', models.CharField(choices=[('MIDDLE', 'middle'), ('LATE', 'late'), ('EARLY', 'early')], default='MIDDLE', max_length=50, verbose_name='dexterity')),
                ('attack_type', models.CharField(choices=[('NORMAL', 'normal'), ('SKILLSHOT', 'skillshot'), ('AUTOMATIC', 'automatic')], default='normal', max_length=50, verbose_name='attack type')),
                ('health', models.IntegerField(default=100, verbose_name='health')),
                ('shield', models.IntegerField(default=0, verbose_name='shield')),
                ('attack', models.IntegerField(default=10, verbose_name='attack')),
                ('critical_chance', models.FloatField(default=0.01, verbose_name='critical chance')),
                ('critical_ratio', models.FloatField(default=0.01, verbose_name='critical ratio')),
                ('miss_chance', models.FloatField(default=0.0, verbose_name='miss chance')),
                ('dodge_chance', models.FloatField(default=0.0, verbose_name='dodge chance')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical unit',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserBuy',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('benefit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.BenefitBox')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user_buy',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserCard',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='quantity card')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='level')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('character', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.Unit')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('cool_down', models.DateTimeField(null=True, verbose_name='cooldown')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user_card',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserChest',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('chest_type', models.CharField(choices=[('free', 'FREE'), ('non_free', 'NON_FREE')], default='non_free', max_length=50, verbose_name='chest type')),
                ('status', models.CharField(choices=[('close', 'close'), ('opening', 'opening'), ('ready', 'ready'), ('used', 'used')], default='close', max_length=50, verbose_name='status')),
                ('sequence_number', models.PositiveIntegerField(default=0, validators=[objects.validators.validate_sequence], verbose_name='sequence number')),
                ('cards', django.contrib.postgres.fields.jsonb.JSONField(default=None, null=True, verbose_name='cards')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('chest', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.Chest')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('chest_opening_date', models.DateTimeField(default=None, null=True, verbose_name='chest opening time')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user_chest',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserCurrency',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('gem', models.PositiveIntegerField(default=0, verbose_name='gem quantity')),
                ('coin', models.PositiveIntegerField(default=0, verbose_name='coin quantity')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('trophy', models.PositiveIntegerField(default=0, verbose_name='trophy quantity')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical profile',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserHero',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('enable_hero', models.BooleanField(default=False, verbose_name='enable hero')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='quantity card')),
                ('level', models.PositiveIntegerField(default=0, verbose_name='level')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('hero', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.Hero')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('selected_item', django.contrib.postgres.fields.jsonb.JSONField(default=None, null=True, verbose_name='selected item')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user_hero',
            },
        ),
        migrations.RenameModel(
            old_name='League',
            new_name='LeagueInfo',
        ),
        migrations.RenameField(
            model_name='chest',
            old_name='league',
            new_name='info',
        ),
        migrations.AlterField(
            model_name='chest',
            name='chest_type',
            field=models.CharField(choices=[('W', 'wooden'), ('S', 'silver'), ('G', 'gold'), ('C', 'crystal')], default='W', max_length=50, verbose_name='chest type'),
        ),
        migrations.AddField(
            model_name='chest',
            name='opening_time',
            field=models.PositiveIntegerField(default=5, verbose_name='opening time'),
        ),
        migrations.AddField(
            model_name='chest',
            name='time_to_open',
            field=models.PositiveIntegerField(default=2, verbose_name='time to open'),
        ),
        migrations.AlterUniqueTogether(
            name='chest',
            unique_together=set([('info', 'chest_type')]),
        ),
        migrations.AlterModelOptions(
            name='leagueinfo',
            options={'verbose_name': 'league_info', 'verbose_name_plural': 'league_infoes'},
        ),
        migrations.AlterModelTable(
            name='leagueinfo',
            table='league_infoes',
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('name', models.CharField(max_length=50, verbose_name='item_type')),
                ('damage', models.IntegerField(default=0, verbose_name='damage')),
                ('shield', models.IntegerField(default=0, verbose_name='shield')),
                ('health', models.IntegerField(default=0, verbose_name='health')),
                ('critical_ratio', models.IntegerField(default=0, verbose_name='critical ratio')),
                ('critical_chance', models.IntegerField(default=0, verbose_name='critical chance')),
                ('dodge_chance', models.IntegerField(default=0, verbose_name='dodge chance')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='objects.Hero', verbose_name='hero')),
            ],
            options={
                'db_table': 'items',
                'verbose_name': 'item',
                'verbose_name_plural': 'items',
            },
        ),
        migrations.AlterUniqueTogether(
            name='item',
            unique_together=set([]),
        ),
        migrations.RemoveField(
            model_name='item',
            name='hero',
        ),
        migrations.DeleteModel(
            name='Item',
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('name', models.CharField(max_length=50, verbose_name='item_type')),
                ('damage', models.IntegerField(default=0, verbose_name='damage')),
                ('shield', models.IntegerField(default=0, verbose_name='shield')),
                ('health', models.IntegerField(default=0, verbose_name='health')),
                ('critical_ratio', models.IntegerField(default=0, verbose_name='critical ratio')),
                ('critical_chance', models.FloatField(default=0, verbose_name='critical chance')),
                ('dodge_chance', models.FloatField(default=0, verbose_name='dodge chance')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='objects.Hero', verbose_name='hero')),
            ],
            options={
                'db_table': 'items',
                'verbose_name': 'item',
                'verbose_name_plural': 'items',
            },
        ),
        migrations.AlterUniqueTogether(
            name='item',
            unique_together=set([('name', 'hero')]),
        ),
        migrations.AlterField(
            model_name='item',
            name='name',
            field=models.CharField(max_length=50, verbose_name='name'),
        ),
        migrations.AddField(
            model_name='item',
            name='item_type',
            field=models.CharField(choices=[('helmet', 'helmet'), ('weapon', 'weapon'), ('Armor', 'Armor')], default='helmet', max_length=50, null=True, verbose_name='item type'),
        ),
        migrations.AlterField(
            model_name='item',
            name='critical_ratio',
            field=models.FloatField(default=0, verbose_name='critical ratio'),
        ),
        migrations.AddField(
            model_name='item',
            name='level',
            field=models.PositiveIntegerField(default=0, verbose_name='level'),
        ),
        migrations.AlterField(
            model_name='item',
            name='name',
            field=models.CharField(choices=[('Biker', 'Biker'), ('Dimetry', 'Dimetry'), ('Lion', 'Lion'), ('Guerrilla', 'Guerrilla'), ('Knight', 'Knight'), ('Horn', 'Horn'), ('Mexican', 'Mexican'), ('Mexican', 'Mexican')], default='Biker', max_length=50, verbose_name='name'),
        ),
        migrations.AlterUniqueTogether(
            name='item',
            unique_together=set([('name', 'hero', 'item_type')]),
        ),
        migrations.AlterField(
            model_name='item',
            name='name',
            field=models.CharField(choices=[('Biker', 'Biker'), ('Dimetry', 'Dimetry'), ('Lion', 'Lion'), ('Guerrilla', 'Guerrilla'), ('Knight', 'Knight'), ('Horn', 'Horn'), ('Mexican', 'Mexican'), ('Naga', 'Naga'), ('Duff', 'Duff')], default='Biker', max_length=50, verbose_name='name'),
        ),
        migrations.CreateModel(
            name='HistoricalUserItem',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('updated_date', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='quantity card')),
                ('level', models.PositiveIntegerField(default=0, verbose_name='level')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='objects.Item')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user_item',
            },
        ),
        migrations.CreateModel(
            name='UserItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='quantity card')),
                ('level', models.PositiveIntegerField(default=0, verbose_name='level')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='objects.Item', verbose_name='item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.AUTH_USER_MODEL, verbose_name='username')),
            ],
            options={
                'db_table': 'user_item',
                'verbose_name': 'user_item',
                'verbose_name_plural': 'user_item',
            },
        ),
        migrations.AlterUniqueTogether(
            name='useritem',
            unique_together=set([('user', 'item')]),
        ),
        migrations.RemoveField(
            model_name='hero',
            name='level',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='level',
        ),
        migrations.AlterModelTable(
            name='usercurrency',
            table='profiles',
        ),
        migrations.AlterField(
            model_name='usercurrency',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_currency', to=settings.AUTH_USER_MODEL, unique=True),
        ),
        migrations.AlterField(
            model_name='usercurrency',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_currency', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('char_spells_index', models.IntegerField(default=0, verbose_name='char spells index')),
                ('cost', models.IntegerField(default=0, verbose_name='cost')),
                ('is_instant', models.BooleanField(default=True, verbose_name='is_instant')),
                ('need_target_to_come_near', models.BooleanField(default=True, verbose_name='need target to come near')),
                ('spell_name', models.CharField(default='', max_length=100, verbose_name='spell name')),
                ('spell_type', models.CharField(choices=[('CriticalAttack', 'CriticalAttack'), ('Magic', 'Magic'), ('Secret', 'Secret'), ('Chakra', 'Chakra'), ('DamageReturn', 'DamageReturn')], default='Magic', max_length=50, verbose_name='spell type')),
                ('spell_impact', models.CharField(choices=[('None', 'None'), ('Low', 'Low'), ('High', 'High')], default='Low', max_length=20, verbose_name='damage type')),
                ('damage_type', models.CharField(choices=[('Low', 'Low'), ('High', 'High')], default='Low', max_length=20, verbose_name='spell_impact')),
                ('generated_action_point', models.IntegerField(default=0, verbose_name='generated action point')),
            ],
            options={
                'db_table': 'spells',
                'verbose_name': 'spell',
                'verbose_name_plural': 'spells',
            },
        ),
        migrations.CreateModel(
            name='SpellEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='created date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='created date')),
                ('params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='params')),
                ('is_multi_part', models.BooleanField(default=False, verbose_name='is multi part')),
                ('target_character_id', models.FloatField(default=0, verbose_name='target character id')),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effects', to='objects.Spell', verbose_name='spell')),
            ],
            options={
                'db_table': 'spell_effects',
                'verbose_name': 'spell_effect',
                'verbose_name_plural': 'spell_effects',
            },
        ),
        migrations.AddField(
            model_name='usercurrency',
            name='trophy',
            field=models.PositiveIntegerField(default=0, verbose_name='trophy quantity'),
        ),
    ]
